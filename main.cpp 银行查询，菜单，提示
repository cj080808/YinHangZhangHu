//main.cpp

#include "Account.h"
#include "Accumulator.h"
#include "Date.h"
#include "SavingsAccount.h"
#include "CreditAccount.h"
#include "AccountException.h"
#include "UserManager.h"
#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <sstream>
#include <cstdio>
#include <limits>
#include <unordered_map>

using namespace std;

struct deleter {
    template <class T> void operator () (T* p) { delete p; }
};

//读取命令
void executeCommandsFromFile(Date& date, vector<Account*>& accounts) {
    ifstream file("commands.txt");
    if (file.is_open()) {
        string line;
        while (getline(file, line)) {
            istringstream iss(line);    //解析命令
            char cmd;
            iss >> cmd;

            char type;
            int index, day;
            double amount, credit, rate, fee;
            string id, desc;
            Account* account;
            Date date1, date2;

            switch (cmd) {
            case 'a': // 添加账户
                iss >> type >> id;
                if (type == 's') {
                    iss >> rate;
                    account = new SavingsAccount(date, id, rate);
                }
                else {
                    iss >> credit >> rate >> fee;
                    account = new CreditAccount(date, id, credit, rate, fee);
                }
                accounts.push_back(account);
                break;
            case 'd': // 存款
                iss >> index >> amount;
                getline(iss >> ws, desc);
                accounts[index]->deposit(date, amount, desc);
                break;
            case 'w': // 取款
                iss >> index >> amount;
                getline(iss >> ws, desc);
                accounts[index]->withdraw(date, amount, desc);
                break;
            case 's': // 显示账户
                for (size_t i = 0; i < accounts.size(); i++) {
                    cout << "[" << i << "] ";
                    accounts[i]->show();
                    cout << endl;
                }
                break;
            case 'c': // 更改日期
                iss >> day;
                date = Date(date.getYear(), date.getMonth(), day);
                break;
            case 'n': // 下一个月
                if (date.getMonth() == 12)
                    date = Date(date.getYear() + 1, 1, 1);
                else
                    date = Date(date.getYear(), date.getMonth() + 1, 1);
                for (vector<Account*>::iterator iter = accounts.begin(); iter != accounts.end(); ++iter)
                    (*iter)->settle(date);
                break;
            case 'q': // 查询交易记录（XX/XX/XX）
                date1 = Date::read();
                date2 = Date::read();
                Account::query(date1, date2);
                break;
            case 'o': // 查询排序后的交易记录
                date1 = Date::read();
                date2 = Date::read();
                for (auto* account : accounts) {
                    vector<AccountRecord> transactions = account->getSortedTransactions(date1, date2);
                    cout << "Account ID: " << account->getId() << endl;
                    for (const auto& record : transactions) {
                        cout << record.getDate() << "\t" << record.getAmount() << "\t" << record.getBalance() << "\t" << record.getMessage() << endl;
                    }
                }
                break;
            }
        }
        file.close();
    }
}

//计入命令
void addCommandToFile(const string& command) {
    ofstream file("commands.txt", ios::app);
    if (file.is_open()) {
        file << command << endl;
        file.close();
    }
}

//清除所有记录
void clearAllRecords(Date& date, vector<Account*>& accounts) {
    if (std::remove("commands.txt") == 0) {
        cout << "所有记录已清除" << endl;
    }
    else {
        cout << "清除记录失败" << endl;
    }

    for_each(accounts.begin(), accounts.end(), deleter());
    accounts.clear();
    Account::setTotal(0);
    date = Date(2008, 11, 1);
}

//创建账户
void handleCreateAccount(Date& date, vector<Account*>& accounts, string& command) {
    char type;
    string id;
    double rate, credit, fee;
    Account* account;

    cout << "Enter account type (s for Savings, c for Credit): ";
    cin >> type;
    cout << "Enter account ID: ";
    cin >> id;
    command += " " + string(1, type) + " " + id;
    if (type == 's') {
        cout << "Enter interest rate: ";
        cin >> rate;
        command += " " + to_string(rate);
        account = new SavingsAccount(date, id, rate);
    }
    else {
        cout << "Enter credit limit, interest rate, and annual fee: ";
        cin >> credit >> rate >> fee;
        command += " " + to_string(credit) + " " + to_string(rate) + " " + to_string(fee);
        account = new CreditAccount(date, id, credit, rate, fee);
    }
    accounts.push_back(account);
}

//存款
void handleDeposit(Date& date, vector<Account*>& accounts, string& command) {
    int index;
    double amount;
    string desc;

    cout << "Enter account index: ";
    cin >> index;
    cout << "Enter deposit amount: ";
    cin >> amount;
    cout << "Enter description: ";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    getline(cin, desc);
    command += " " + to_string(index) + " " + to_string(amount) + desc;
    accounts[index]->deposit(date, amount, desc);
}

//取款
void handleWithdraw(Date& date, vector<Account*>& accounts, string& command) {
    int index;
    double amount;
    string desc;

    cout << "Enter account index: ";
    cin >> index;
    cout << "Enter withdrawal amount: ";
    cin >> amount;
    cout << "Enter description: ";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    getline(cin, desc);
    if (amount <= accounts[index]->getBalance()) {
        command += " " + to_string(index) + " " + to_string(amount) + desc;
    }
    //异常处理机制
    try {
        accounts[index]->withdraw(date, amount, desc);
    }
    catch (const AccountException& e) {
        std::cerr << "Account error: " << e.what() << std::endl;
        const Account* errAccount = e.getAccount();
        std::cerr << "  Account ID: #" << errAccount->getId() << std::endl;
    }
}

//显示账户信息
void handleShowAccounts(const vector<Account*>& accounts) {
    cout << "Current accounts:" << endl;
    for (size_t i = 0; i < accounts.size(); i++) {
        cout << "[" << i << "] ";
        accounts[i]->show();
        cout << endl;
    }
}

//改变日期
void handleChangeDate(Date& date, string& command) {
    int day;
    cout << "Enter new day: ";
    cin >> day;
    //异常处理机制
    try {
        if (day < date.getDay()) {
            throw std::invalid_argument("You cannot specify a previous day");
        }
        else if (day > date.getMaxDay()) {
            throw std::invalid_argument("Invalid day");
        }
        else {
            date = Date(date.getYear(), date.getMonth(), day);
            command += " " + to_string(day);
        }
    }
    catch (const std::invalid_argument& e) {
        std::cout << "Date error: " << e.what() << std::endl;
    }
}

//下一个月
void handleNextMonth(Date& date, vector<Account*>& accounts, string& command) {
    if (date.getMonth() == 12)
        date = Date(date.getYear() + 1, 1, 1);
    else
        date = Date(date.getYear(), date.getMonth() + 1, 1);
    for (vector<Account*>::iterator iter = accounts.begin(); iter != accounts.end(); ++iter)
        (*iter)->settle(date);
    command += "";
}

//查询信息
void handleQuery(Date& date, string& command) {
    Date date1, date2;
    cout << "Enter start date (YYYY/MM/DD): ";
    date1 = Date::read();
    cout << "Enter end date (YYYY/MM/DD): ";
    date2 = Date::read();
    Account::query(date1, date2);
    command += " " + to_string(date1.getYear()) + "/" + to_string(date1.getMonth()) + "/" + to_string(date1.getDay()) + " "
        + to_string(date2.getYear()) + "/" + to_string(date2.getMonth()) + "/" + to_string(date2.getDay());
}

//按金额排序的信息
void handleSortedQuery(Date& date, vector<Account*>& accounts) {

    Date date1, date2;
    cout << "Enter start date (YYYY/MM/DD): ";
    date1 = Date::read();
    cout << "Enter end date (YYYY/MM/DD): ";
    date2 = Date::read();
    cout << "Sorted transactions from " << date1 << " to " << date2 << ":" << endl;

    for (auto* account : accounts) {
        vector<AccountRecord> transactions = account->getSortedTransactions(date1, date2);
        cout << "Account ID: " << account->getId() << endl;
        for (const auto& record : transactions) {
            cout << record.getDate() << "\t" << record.getAmount() << "\t" << record.getBalance() << "\t" << record.getMessage() << endl;
        }
        cout << endl; 
    }
}

//清空记录
void handleReset(Date& date, vector<Account*>& accounts, string& command) {
    clearAllRecords(date, accounts);
    command = ""; // 清空命令记录
}

//提醒用户的信息
void showUserNotifications(const vector<Account*>& accounts, const Date& currentDate) {
    cout << "User Notifications:" << endl;
    for (auto* account : accounts) {
        std::pair<double, double> stats = account->getMonthlyStatistics(currentDate);
        double income = stats.first;
        double expenses = stats.second;

        cout << "Account ID: " << account->getId() << endl;
        cout << "Income: " << income << endl;
        cout << "Expenses: " << expenses << endl;

        // 如果是 CreditAccount，检查是否有欠款
        if (dynamic_cast<CreditAccount*>(account)) {
            CreditAccount* creditAccount = static_cast<CreditAccount*>(account);
            if (creditAccount->getDebt() < 0) {
                cout << "You have a debt of " << -creditAccount->getDebt() << " that needs to be repaid." << endl;
            }
        }
    }
}

//主循环逻辑
void mainLoop(Date& date, vector<Account*>& accounts, UserManager& userManager) {
    cout << "Welcome to the Bank Account Management System!" << endl;
    cout << "Commands: (a)add account (d)deposit (w)withdraw (s)show (c)change day (n)next month (q)query (o)sorted query (e)exit (r)reset" << endl;

    char cmd;
    do {
        date.showTime();
        cout << "\tTotal: " << Account::getTotal() << "\tcommand> ";

        string command;
        cin >> cmd;
        command += cmd;

        switch (cmd) {
        case 'a': // 添加账户
            handleCreateAccount(date, accounts, command);
            break;
        case 'd': // 存款
            handleDeposit(date, accounts, command);
            break;
        case 'w': // 取款
            handleWithdraw(date, accounts, command);
            break;
        case 's': // 显示账户
            handleShowAccounts(accounts);
            break;
        case 'c': // 更改日期
            handleChangeDate(date, command);
            break;
        case 'n': // 下一个月
            handleNextMonth(date, accounts, command);
            break;
        case 'q': // 查询交易记录
            handleQuery(date, command);
            break;
        case 'o': // 查询排序后的交易记录
            handleSortedQuery(date, accounts);
            break;
        case 'r': // 重置
            handleReset(date, accounts, command);
            break;
        }

        if (cmd != 's' && cmd != 'e' && cmd != 'r') {
            addCommandToFile(command);
        }

    } while (cmd != 'e');
}

//菜单
bool showMenu(UserManager& userManager, string& username, string& password) {
    cout << "Welcome to the Bank Account Management System!" << endl;
    cout << "Please enter your username: ";
    cin >> username;
    cout << "Please enter your password: ";
    cin >> password;

    if (userManager.loginUser(username, password)) {
        cout << "Login successful!" << endl;
        return true;
    }
    else {
        cout << "User does not exist. Would you like to register a new user? (y/n): ";
        char choice;
        cin >> choice;
        if (choice == 'y') {
            if (userManager.registerUser(username, password)) {
                cout << "Registration successful!" << endl;
                return true;
            }
            else {
                cout << "Registration failed, username already exists." << endl;
                return false;
            }
        }
        else {
            cout << "Exiting program." << endl;
            return false;
        }
    }
}

int main() {
    UserManager userManager("users.txt");
    string username, password;

    if (!showMenu(userManager, username, password)) {
        return 1;  // 如果用户选择退出或注册失败，直接退出程序
    }

    Date date(2008, 11, 1);
    vector<Account*> accounts;

    // 显示用户通知
    showUserNotifications(accounts, date);

    // 执行文件中的命令
    executeCommandsFromFile(date, accounts);

    // 主循环
    mainLoop(date, accounts, userManager);

    // 清理资源
    for_each(accounts.begin(), accounts.end(), deleter());
    return 0;
}
