//main.cpp

#include"Account.h"
#include"Accumulator.h"
#include"Date.h"
#include"SavingsAccount.h"
#include"CreditAccount.h"
#include"AccountException.h"
#include <iostream>
#include <vector>
#include <algorithm>
#include <fstream>
#include <sstream>
#include <cstdio>
#include<stdexcept>

using namespace std;

struct deleter {
    template <class T> void operator () (T* p) { delete p; }
};

// 读取并执行txt
void executeCommandsFromFile(Date& date, vector<Account*>& accounts) {
    ifstream file("commands.txt");
    if (file.is_open()) {
        string line;
        while (getline(file, line)) {
            istringstream iss(line);
            char cmd;
            iss >> cmd;

            char type;
            int index, day;
            double amount, credit, rate, fee;
            string id, desc;
            Account* account;
            Date date1, date2;

            switch (cmd) {
            case 'a': // 创建账户
                iss >> type >> id;
                if (type == 's') {
                    iss >> rate;
                    account = new SavingsAccount(date, id, rate);
                }
                else {
                    iss >> credit >> rate >> fee;
                    account = new CreditAccount(date, id, credit, rate, fee);
                }
                accounts.push_back(account);
                break;
            case 'd': // 存款
                iss >> index >> amount;
                getline(iss >> ws, desc);
                accounts[index]->deposit(date, amount, desc);
                break;
            case 'w': // 取款
                iss >> index >> amount;
                getline(iss >> ws, desc);
                accounts[index]->withdraw(date, amount, desc);
                break;
            case 's': // 查询所有账户信息
                for (size_t i = 0; i < accounts.size(); i++) {
                    cout << "[" << i << "] ";
                    accounts[i]->show();
                    cout << endl;
                }
                break;
            case 'c': // 改变日期
                iss >> day;
                date = Date(date.getYear(), date.getMonth(), day);
                break;
            case 'n': // 进入下一月
                if (date.getMonth() == 12)
                    date = Date(date.getYear() + 1, 1, 1);
                else
                    date = Date(date.getYear(), date.getMonth() + 1, 1);
                for (vector<Account*>::iterator iter = accounts.begin(); iter != accounts.end(); ++iter)
                    (*iter)->settle(date);
                break;
            case 'q': // 查询一段时间内的账目
                date1 = Date::read();
                date2 = Date::read();
                Account::query(date1, date2);
                break;
            }
        }
        file.close();
    }
}

// 添加命令到txt
void addCommandToFile(const string& command) {
    ofstream file("commands.txt", ios::app);
    if (file.is_open()) {
        file << command << endl;
        file.close();
    }
}

// 清除所有记录
void clearAllRecords(Date& date, vector<Account*>& accounts) {
    // 删除txt
    if (std::remove("commands.txt") == 0) {
        cout << "所有记录已清除" << endl;
    }
    else {
        cout << "清除记录失败，文件可能不存在或被占用" << endl;
    }

    // 清空账户信息
    for_each(accounts.begin(), accounts.end(), deleter());
    accounts.clear();
    Account::setTotal(0);
    date = Date(2008, 11, 1);
}

// 处理创建账户命令
void handleCreateAccount(Date& date, vector<Account*>& accounts, string& command) {
    char type;
    string id;
    double rate, credit, fee;
    Account* account;

    cin >> type >> id;
    command += " " + string(1, type) + " " + id;
    if (type == 's') {
        cin >> rate;
        command += " " + to_string(rate);
        account = new SavingsAccount(date, id, rate);
    }
    else {
        cin >> credit >> rate >> fee;
        command += " " + to_string(credit) + " " + to_string(rate) + " " + to_string(fee);
        account = new CreditAccount(date, id, credit, rate, fee);
    }
    accounts.push_back(account);
}

// 处理存款命令
void handleDeposit(Date& date, vector<Account*>& accounts, string& command) {
    int index;
    double amount;
    string desc;

    cin >> index >> amount;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    getline(cin, desc);
    command += " " + to_string(index) + " " + to_string(amount) + desc;
    accounts[index]->deposit(date, amount, desc);
}

// 处理取款命令
void handleWithdraw(Date& date, vector<Account*>& accounts, string& command) {
    int index;
    double amount;
    string desc;

    cin >> index >> amount;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    getline(cin, desc);
    if (amount <= accounts[index]->getBalance()) {
        command += " " + to_string(index) + " " + to_string(amount) + desc;
    }
    try {
        accounts[index]->withdraw(date, amount, desc);
    }
    catch (const AccountException& e) {
        std::cerr << "Account error: " << e.what() << std::endl;
        const Account* errAccount = e.getAccount();
        std::cerr << "  账户信息:#" << errAccount->getId() << std::endl;
    }
}

// 处理查询所有账户信息命令
void handleShowAccounts(const vector<Account*>& accounts) {
    for (size_t i = 0; i < accounts.size(); i++) {
        cout << "[" << i << "] ";
        accounts[i]->show();
        cout << endl;
    }
}

// 处理改变日期命令
void handleChangeDate(Date& date, string& command) {
    int day;
    cin >> day;
    try {
        if (day < date.getDay()) {
            throw std::invalid_argument("You cannot specify a previous day");
        }
        else if (day > date.getMaxDay()) {
            throw std::invalid_argument("Invalid day");
        }
        else {
            date = Date(date.getYear(), date.getMonth(), day);
            command += " " + to_string(day);
        }
    }
    catch (const std::invalid_argument& e) {
        std::cout << "Date error: " << e.what() << std::endl;
    }
}

// 处理进入下一月命令
void handleNextMonth(Date& date, vector<Account*>& accounts, string& command) {
    if (date.getMonth() == 12)
        date = Date(date.getYear() + 1, 1, 1);
    else
        date = Date(date.getYear(), date.getMonth() + 1, 1);
    for (vector<Account*>::iterator iter = accounts.begin(); iter != accounts.end(); ++iter)
        (*iter)->settle(date);
    command += "";
}

// 处理查询一段时间内的账目命令
void handleQuery(Date& date, string& command) {
    Date date1 = Date::read();
    Date date2 = Date::read();
    Account::query(date1, date2);
    command += " " + to_string(date1.getYear()) + "/" + to_string(date1.getMonth()) + "/" + to_string(date1.getDay()) + " "
        + to_string(date2.getYear()) + "/" + to_string(date2.getMonth()) + "/" + to_string(date2.getDay());
}

// 处理重置命令
void handleReset(Date& date, vector<Account*>& accounts, string& command) {
    clearAllRecords(date, accounts);
    command = ""; // 重置命令为空
}

// 主循环处理用户输入
void mainLoop(Date& date, vector<Account*>& accounts) {
    cout << "(a)add account (d)deposit (w)withdraw (s)show (c)change day (n)next month (q)query (e)exit (r)reset" << endl;

    char cmd;
    do {
        // 显示当前日期和总金额
        date.showTime();
        cout << "\tTotal: " << Account::getTotal() << "\tcommand> ";

        string command;
        cin >> cmd;
        command += cmd;

        switch (cmd) {
        case 'a': // 创建账户
            handleCreateAccount(date, accounts, command);
            break;
        case 'd': // 存款
            handleDeposit(date, accounts, command);
            break;
        case 'w': // 取款
            handleWithdraw(date, accounts, command);
            break;
        case 's': // 查询所有账户信息
            handleShowAccounts(accounts);
            break;
        case 'c': // 改变日期
            handleChangeDate(date, command);
            break;
        case 'n': // 进入下一月
            handleNextMonth(date, accounts, command);
            break;
        case 'q': // 查询一段时间内的账目
            handleQuery(date, command);
            break;
        case 'r': // 重置所有记录
            handleReset(date, accounts, command);
            break;
        }

        if (cmd != 's' && cmd != 'e' && cmd != 'r') {
            addCommandToFile(command);
        }

    } while (cmd != 'e');
}

int main() {
    Date date(2008, 11, 1);
    vector<Account*> accounts;

    // 执行txt
    executeCommandsFromFile(date, accounts);

    // 主循环处理用户输入
    mainLoop(date, accounts);

    // 释放账户内存
    for_each(accounts.begin(), accounts.end(), deleter());
    return 0;
}
